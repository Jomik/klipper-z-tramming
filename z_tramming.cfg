[respond]

[gcode_macro Z_TRAMMING]
gcode:
  # We need a probe definition in printer.cfg
  {% set probe = printer.configfile.settings.probe %}
  {% if probe is undefined %}
    {action_raise_error("Missing probe settings")}
  {% endif %}

  # Verify that required configurations are present
  {% set config = printer["gcode_macro _Z_TRAMMING_CONFIG"] %}
  {% if config is undefined %}
    {action_raise_error("Missing _Z_TRAMMING_CONFIG macro")}
  {% endif %}
  {% if config.tolerance is undefined %}
    {action_raise_error("Missing tolerance in _Z_TRAMMING_CONFIG macro")}
  {% endif %}
  {% if config.screw_pitch is undefined %}
    {action_raise_error("Missing screw_pitch in _Z_TRAMMING_CONFIG macro")}
  {% endif %}

  {% set speed = config.speed | default(printer.configfile.settings.safe_z_home.speed) * 60 %}

  {% set stepper_x = printer.configfile.settings.stepper_x %}
  {% set x_min = stepper_x.position_min | float %}
  {% set left = config.left | default(x_min if probe.x_offset >= 0 else (x_min - (probe.x_offset * 2))) %}

  {% set x_max = stepper_x.position_max | float %}
  {% set right = config.right | default(x_max if probe.x_offset <= 0 else (x_max - (probe.x_offset * 2))) %}

  {% set stepper_y = printer.configfile.settings.stepper_y %}
  {% set center =  config.y_position | default((stepper_y.position_min + stepper_y.position_max) / 2 - probe.y_offset) %}

  # Home all axes if not already homed
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  # Always home Z axis in case stepper has been disabled
  {% else %}
    G28 Z
  {% endif %}

  G90
  G0 Z10

  # Probe right side
  G1 X{right} Y{center} F{speed}
  PROBE
  _Z_TRAMMING_SAVE_RESULT SIDE=right
  G0 Z10

  # Probe left side
  G0 X{left} Y{center} F{speed}
  PROBE
  _Z_TRAMMING_SAVE_RESULT SIDE=left
  G0 Z10

  _Z_TRAMMING_EVALUATE

[gcode_macro _Z_TRAMMING_EVALUATE]
variable_left: 0
variable_right: 0
gcode:
  {% set config = printer["gcode_macro _Z_TRAMMING_CONFIG"] %}
  {% set tolerance = config.tolerance %}
  {% set screw_pitch = config.screw_pitch %}

  {% set variance = (left - right) | abs %}

  # If we are outside of tolerance, prompt the user to adjust the right lead screw
  {% if variance > tolerance %}
    {% set right_is = "higher" if left > right else "lower" %}
    RESPOND TYPE=error MSG='{"Right is %0.3fmm %s" % (variance, right_is)}'

    {action_respond_info("01:20 means 1 full turn and 20 minutes, CW = clockwise, CCW = counter clockwise")}
    # One full turn will move the Z axis by the screw pitch
    {% set hours = (variance / screw_pitch) | int %}
    {% set minutes = ((variance / screw_pitch * 60) % 60) | int %}
    {% set direction = "CCW" if left > right else "CW" %}

    RESPOND TYPE=command MSG="action:prompt_begin Z axis needs adjustment"
    RESPOND TYPE=command MSG='{"action:prompt_text Tolerance is set to %0.3fmm" % tolerance}'
    RESPOND TYPE=command MSG='{"action:prompt_text Right is %0.3fmm %s" % (variance, right_is)}'
    {% if hours > 0 or minutes > 0%}
      RESPOND TYPE=error MSG='{"Turn the right lead screw: %02d:%02d %s" % (hours, minutes, direction)}'
      RESPOND TYPE=command MSG='{"action:prompt_text Turn the right lead screw: %02d:%02d %s" % (hours, minutes, direction)}'
      RESPOND TYPE=command MSG="action:prompt_text 01:20 means 1 full turn and 20 minutes, CW = clockwise, CCW = counter-clockwise"
    {% else %}
      # Display seconds because getting a rotation of 0 minutes is not helpful
      {% set seconds = ((variance / screw_pitch * 60 * 60) % 60) | int %}
      RESPOND TYPE=error MSG='{"Turn the right lead screw %02d seconds %s" % (seconds, direction)}'
      RESPOND TYPE=command MSG='{"action:prompt_text Turn the right lead screw %02d seconds %s" % (seconds, direction)}'
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|_Z_TRAMMING_CANCEL|error"
    RESPOND TYPE=command MSG="action:prompt_footer_button Retry|_Z_TRAMMING_RETRY|primary"
    RESPOND TYPE=command MSG="action:prompt_show"

    # Disable the stepper so the user can adjust the lead screw
    SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
    # Exit the macro and potentially abort the print job
    _Z_TRAMMING_ERROR MSG="Z axis is out of tolerance"
  {% else %}
    {action_respond_info("No adjustment needed")}
    RESPOND TYPE=command MSG="action:prompt_begin Z axis is within tolerance"
    RESPOND TYPE=command MSG='{"action:prompt_text Tolerance is set to %0.3fmm" % tolerance}'
    RESPOND TYPE=command MSG='{"action:prompt_text Variance is %0.3fmm" % variance}'
    RESPOND TYPE=command MSG="action:prompt_text If your print was cancelled, you may restart it now."
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  G28 Z
  M400

[gcode_macro _Z_TRAMMING_SAVE_RESULT]
gcode:
  SET_GCODE_VARIABLE MACRO=_Z_TRAMMING_EVALUATE VARIABLE={params.SIDE} VALUE={printer.probe.last_z_result}

[gcode_macro _Z_TRAMMING_ERROR]
gcode:
    {action_raise_error(params.MSG)}

[gcode_macro _Z_TRAMMING_RETRY]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  Z_TRAMMING

[gcode_macro _Z_TRAMMING_CANCEL]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  G28 Z
  _Z_TRAMMING_ERROR MSG="Z tramming cancelled"
